#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include "my_pokemon_manager.h"

 pthread_mutex_t mutex;
 
 void iniciar(Lista* lista){
    lista->cabeza=NULL;
    lista->tamano=0;
}
void imprimir_menu(){
  printf("=========================================\n");
  printf("[*][2016][SAUCEM APPS][PokeManager]======\n");
  printf("=========================================\n");
  printf("[1] Salir\n");
  printf("[2] Insertar Pokemon\n");
  printf("[3] Mostrar Pokemons\n");
  printf("[4] Mostrar Pokemon por ID\n");
  printf("[5] Modificar un Pokemon por ID\n");
  printf("[6] Borrar Pokemon por ID\n");
  printf("[7] Exportar catálogo Pokemon\n");
  printf("[8] Importar catálogo Pokemon\n");
  printf("[9] Combate Pokemon\n");
  printf("[10] Mostar Pokemons corruptos\n");
  printf("[11] Autosalvado Pokemon (10 segundos)\n");
  printf("\t\t#INFO:   1 veces mostrado el menú principal\n\n");
  printf("Dame una opción: ");
}
char *leer_texto(){
  char *cadena = NULL;
    size_t numero_bytes = 0;
    ssize_t bytes_leidos;

    bytes_leidos = getline(&cadena,&numero_bytes,stdin);
    if(cadena[bytes_leidos-1]=='\n'){
     cadena[bytes_leidos-1]='\0';
    }
    if(bytes_leidos == -1){
      return NULL;
    }
    
    return(cadena);
    free(cadena);
}

int leer_entero(){
  char* convertir = leer_texto();
  int valor = strtol(convertir, NULL, 0);
  free(convertir);
  return valor;
}
void borrar_lista(Nodo* cabeza){
  Nodo *i=NULL;
  for(i=cabeza; i != NULL; i= i->siguiente){
    free(i);
  }
}

Nodo *insertar_pokemon(Nodo *cabeza){

 Nodo *insertar=(Nodo*) malloc(sizeof(Nodo));

 printf("\t\t\tInsertando Pokemon");
 printf("\n\t\t\t\t Dame el ID del Pokemon:");
 insertar->pokemon.id=leer_entero();
 printf("\n\t\t\t\t Dame el nombre del Pokemon:");
 insertar->pokemon.s_name=leer_texto();
 printf("\n\t\t\t\t Dame la vida:");
 insertar->pokemon.puntos.hp = leer_entero();
 printf("\n\t\t\t\t Dame el ataque:");
 insertar->pokemon.puntos.attack[0] = leer_entero();
 printf("\n\t\t\t\t Dame la defensa:");
 insertar->pokemon.puntos.defense[0] = leer_entero();
 printf("\n\t\t\t\t Dame el ataque especial:");
 insertar->pokemon.puntos.attack[1] = leer_entero();
 printf("\n\t\t\t\t Dame la defensa especial: ");
 insertar->pokemon.puntos.defense[1] = leer_entero();
 printf("\n\t\t\t\t Dame la velocidad:"); 
 insertar->pokemon.puntos.speed = leer_entero();

 if (cabeza==NULL){
   cabeza=insertar;
 }else{
   insertar->siguiente=cabeza;
   cabeza=insertar;
 }
 return cabeza;
}

void mostrar_resumen(Nodo *cabeza){
  if(cabeza==NULL){
    printf("\n La lista esta vacia");
  }else{
    Nodo *i;
  
 printf("==============================\n");
 printf("| ID|   Nomb. |Vida|Ata.|Def.|\n");
 printf("==============================\n");
 for(i =cabeza; i!=NULL; i= i->siguiente){
 printf("| %d | %s | %d | %d | %d |",i->pokemon.id, i->pokemon.s_name, i->pokemon.puntos.hp,i->pokemon.puntos.attack[0],i->pokemon.puntos.defense[0]);
 printf("\n==============================\n");
 }
}
}
void mostrar_pokemon_ID(Nodo *cabeza){
  if (cabeza ==NULL){
  printf("La lista esta vacia\n");
  }else{
      printf("\n Indique el ID: ");
	int id = leer_entero();
        Nodo *i;
	
        for (i = cabeza; i != NULL; i= i->siguiente){
            if (i->pokemon.id == id){
		printf("= Información completa de Pokemon");
		printf("\n= id: %d",i->pokemon.id);
		printf("\n= vida: %d",i->pokemon.puntos.hp);
		printf("\n= nombre: %s",i->pokemon.s_name);
		printf("\n= ataque: %d",i->pokemon.puntos.attack[0]);
		printf("\n= defensa: %d",i->pokemon.puntos.defense[0]);
		printf("\n= s ataque: %d",i->pokemon.puntos.attack[1]);
		printf("\n= s defensa: %d",i->pokemon.puntos.defense[1]);
		printf("\n= velocidad: %d\n",i->pokemon.puntos.speed);
            }
        }
        
	
    }
}

Nodo *modificar_pokemon(Nodo* cabeza){
  if (cabeza == NULL){
        printf("\n La lista esta vacia \n");
    }else{
        printf("\n Indique el ID: ");
        int id = leer_entero();
        Nodo *i;
	
        for (i = cabeza; i != NULL; i = i->siguiente){
            if (i->pokemon.id == id)
            {
                printf("\n\tel ID del pokemon: ");
                i->pokemon.id = leer_entero();
		printf("\n\tel nombre del pokemon: ");
                i->pokemon.s_name = leer_texto();
                printf("\n\tla vida del pokemon: ");
                i->pokemon.puntos.hp = leer_entero();
		printf("\n\tel ataque del pokemon: ");
                i->pokemon.puntos.attack[0] =leer_entero();
		printf("\n\tla defensa del pokemon: ");
                i->pokemon.puntos.defense[0] =leer_entero();
		printf("\n\tel ataque especial del pokemon: ");
                i->pokemon.puntos.attack[1] =leer_entero();
		printf("\n\tla defensa especial del pokemon: ");
                i->pokemon.puntos.defense[1] =leer_entero();
		printf("\n\tla velocidad del pokemon: ");
                i->pokemon.puntos.speed =leer_entero();
               
            }
        }
    }
    return cabeza;
}

Nodo *borrar_pokemon_ID(Nodo *cabeza){
    if (cabeza == NULL){
        printf("\nLa lista esta vacia \n");
    }else{
        printf("\n Indique el ID: ");
        int id = leer_entero();
        Nodo *i;
        Nodo *borrar;
        
        if(cabeza->pokemon.id == id){
            borrar = cabeza;
	    if(cabeza->siguiente==NULL){
	      return 0;
	    }else{
            cabeza = cabeza->siguiente;
	    }
            free(borrar->pokemon.s_name);
	    free(borrar);
        }else{
	  for (i = cabeza; i != NULL; i = i->siguiente){
            if (i->siguiente->pokemon.id == id){
                borrar = i->siguiente;
                i->siguiente = i->siguiente->siguiente;
                free(borrar->pokemon.s_name);
		free(borrar);
		
            }
	  }
        }
    }
    return cabeza;
}
int exportar_pokemon(Lista *lista){
    FILE * f_out;
    f_out=fopen("data_demo.sbm","wb");
   
    size_t e_escritos;
    if (f_out== NULL){
       perror("El fichero no se ha podido abrir para lectura o no existe.\n");
        return -1;
    }
    
    else{
        Nodo *ptr;
        int i, n;
        
        for (ptr=lista->cabeza, i=0; i<lista->tamano; i++, ptr=ptr->siguiente){
        
            e_escritos=fwrite(&(ptr->pokemon.id), sizeof(int), 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
            
            n=(int)strlen(ptr->pokemon.s_name)+1;
            e_escritos=fwrite(&n,sizeof(int),1,f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
            e_escritos=fwrite(&(ptr->pokemon.s_name), n, 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
 
            e_escritos=fwrite(&(ptr->pokemon.size_name), sizeof(int), 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }

            e_escritos=fwrite(&(ptr->pokemon.puntos.hp), sizeof(int), 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
            
            e_escritos=fwrite(&(ptr->pokemon.puntos.attack), sizeof(int), 1, f_out );
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }

            e_escritos=fwrite(&(ptr->pokemon.puntos.defense), sizeof(int), 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
         
            e_escritos=fwrite(&(ptr->pokemon.puntos.speed), sizeof(int), 1, f_out);
            if(e_escritos!=1){
                 perror("Error: El dato no se ha escrito correctamente \n");
            }
        }
        printf("El fichero se ha exportado correctamente \n");
    }
       
    if (fclose(f_out)!=0){
        perror("No se ha podido cerrar el fichero.\n");
        return -1;
    }
    return 0;
}

void exportar(Nodo *cabeza){
  int tamano;
  int num_elementos;
  FILE *fichero1;
  printf("Introduce el nombre del fichero\n");
  char *nombre_fichero = leer_texto();
  fichero1 = fopen(nombre_fichero, "wb");

  if (fichero1 == NULL){
    printf("El fichero no se ha podido abrir para escritura \n");
  }
  else if (cabeza == NULL){
    printf("La lista está vacia \n");
  }
  else{
    Nodo *i;
    for(i = cabeza; i != NULL; i = i->siguiente){
      num_elementos = fwrite (&(i->pokemon.id), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      tamano = strlen(i->pokemon.s_name) + 1;
      num_elementos = fwrite(&tamano, sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      num_elementos = fwrite(&(i->pokemon.s_name), tamano, 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      num_elementos = fwrite (&(i->pokemon.size_name), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      num_elementos = fwrite (&(i->pokemon.puntos.hp), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      num_elementos = fwrite (&(i->pokemon.puntos.attack), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      num_elementos = fwrite (&(i->pokemon.puntos.defense), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
      num_elementos = fwrite(&(i->pokemon.puntos.speed), sizeof(int), 1, fichero1);
      if (num_elementos != 1){
	printf ("Error: El dato no se ha escrito correctamente \n");
      }
      
    }
    printf("El fichero se ha exportado correctamente \n");
  }
    if (fclose(fichero1) != 0){
      printf("Error al cerrar el fichero \n");
    }
}

void importar(Nodo *cabeza){
  int tamano;
  int num_elementos=-1;
  int i_temp;
  char *c_temp;
  FILE *fichero2;
  printf("Introduce el nombre del fichero\n");
  char *nombre_fichero = leer_texto();
  fichero2 = fopen(nombre_fichero, "rb");
  if (fichero2 == NULL){
    perror("Error al abrir el fichero \n");
    return ;
  }
  
  while (!feof(fichero2) && num_elementos<=0){
    Nodo *nuevoNodo= (Nodo*)malloc(sizeof(Nodo));
  
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
     
    
    
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente %d\n",num_elementos);
      
    }
    
    else{
      nuevoNodo->pokemon.id = i_temp;
      
    }
  
    num_elementos = fread(&tamano, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    num_elementos = fread(&c_temp, sizeof(char), tamano, fichero2);
    if (num_elementos != tamano){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.s_name = c_temp;
      
    }
  
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.size_name = i_temp;
      
    }
    
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.puntos.hp = i_temp;
      
    }
    
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.puntos.attack[2] = i_temp;
      
    }
    
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.puntos.defense[2] = i_temp;
      
    }
    num_elementos = fread(&i_temp, sizeof(int), 1, fichero2);
    if (num_elementos != 1){
      printf ("Error: Un dato no se ha leido correctamente \n");
    }
    else{
      nuevoNodo->pokemon.puntos.speed = i_temp;
     
    }
    
    nuevoNodo->siguiente = cabeza;
    cabeza = nuevoNodo;
    
  }
   if (ferror(fichero2) != 0){
    perror ("Error al leer el fichero \n");
  }
  else{
    printf ("El fichero se ha importado correctamente \n");
  }
  if (fclose(fichero2) != 0){
    perror ("Error al cerrar el fichero \n");
  }
}

Nodo *combate_pokemon(Nodo *cabeza){
  Nodo *i;
  Nodo *j;
  Nodo *pokemon1=NULL;
  Nodo *pokemon2=NULL;
 
  if (cabeza == NULL){
        printf("\n La lista esta vacia \n");
    }else{
        printf("\n Indique el ID: ");
        int id1 = leer_entero();
	
 
    for (i = cabeza; i != NULL; i = i->siguiente){
            if (i->pokemon.id == id1 && i->pokemon.puntos.hp > 0){
	      printf("\nEl pokemon1 puede combatir\n");
	      pokemon1=i;
		}else if(i->pokemon.id == id1 && i->pokemon.puntos.hp < 0){
		  printf("\nEl pokemon1 no puede combatir\n");
		}
	}
	if(pokemon1 == NULL){
	  printf("El pokemon no existe\n");
		  return NULL;
	 }
    }
    if (cabeza == NULL){
        printf("\n La lista esta vacia \n");
    }else{
        printf("\n Indique el ID: ");
        int id2 = leer_entero();
        

	
        for (j = cabeza; j != NULL; j = j->siguiente){
            if (j->pokemon.id == id2 && j->pokemon.puntos.hp > 0){
	      printf("\nEl pokemon2 puede combatir\n");
	      pokemon2=j;
		}else if(j->pokemon.id == id2 && j->pokemon.puntos.hp < 0){
		  printf("\nEl pokemon2 no puede combatir\n");
		}
	}
	if(pokemon2 == NULL){
	  printf("El pokemon no existe\n");
		  return NULL;
	 }
    }
  
    int damage1=(((86+rand()%15)*(pokemon1->pokemon.puntos.attack[0]))/(pokemon2->pokemon.puntos.defense[0])/10);
    printf("El pokemon1 ataca con un daño de: %d\n",damage1);
    
    int damage2=(((86+rand()%15)*pokemon2->pokemon.puntos.attack[0])/pokemon1->pokemon.puntos.defense[0])/10;
    printf("El pokemon2 ataca con un daño de: %d\n",damage2);
    
    int vida_actualizada1 = pokemon1->pokemon.puntos.hp = (pokemon1->pokemon.puntos.hp)-damage2;
    printf("vida actualizada del pokemon1 es: %d\n", vida_actualizada1);
    
    int vida_actualizada2 = pokemon2->pokemon.puntos.hp = (pokemon2->pokemon.puntos.hp)-damage1;
    printf("vida actualizada del pokemon2 es: %d\n", vida_actualizada2);
    
    
    if(vida_actualizada1 > 0){
      printf("El pokemon1 tiene vida\n");
    }else{
      printf("El pokemon1 no tiene vida\n");
    }
    
    if(vida_actualizada2 > 0){
      printf("El pokemon2 tiene vida\n");
    }else{
      printf("El pokemon2 no tiene vida\n");
    }
    
    return (cabeza);
}


void mostrar_pokemon_corrupto(Nodo *cabeza){
    Nodo *i;
    Nodo *j;
    
    for(i = cabeza; i != NULL; i = i->siguiente){
        for(j = cabeza->siguiente; j != NULL; j = j->siguiente){
            if(((i->pokemon.id) == (j->pokemon.id)) && i!=j){
                printf("El pokemon es corrupto por compartir el id\n");
            }
            if(i->pokemon.puntos.hp < 0){
                printf("El pokemon es corrupto porque tiene vida negativa\n");
            }
        }
    }
}


void* autosalvado(void* data){
   printf("Exportando...\n");
  pthread_mutex_lock(&mutex);
  struct Nodo* aux;
  struct s_autosalvado *info=(struct s_autosalvado*)data;
  while(info->opcion == 0){
        aux=info->lista;
	
        exportar_pokemon(info->lista);
        pthread_mutex_unlock(&mutex);
	sleep(10);
	pthread_mutex_lock(&mutex);
    
    }
    
   pthread_mutex_unlock(&mutex);
   
    return 0;
  
}

int main() {
  
  Lista *nodo_pokemon=(struct Lista_pokemon*) malloc (sizeof(Nodo));
   int guardar=0;
   pthread_mutex_init(&mutex,NULL);
   struct s_autosalvado *s_save;
    pthread_mutex_lock(&mutex);
    iniciar(nodo_pokemon);
    Nodo *cabeza=NULL;
    int opcion=0;
    pthread_t thread1 = NULL;
    
  while(opcion!='0'){
  int thr_rc=0; 
  pthread_mutex_unlock(&mutex); 
  imprimir_menu();
  opcion =leer_entero();
  pthread_mutex_lock(&mutex);
   switch(opcion){
     case 1:
  printf("¿Está seguro de que desea salir del programa?[s/N]:");
  Nodo *cabeza = NULL;
  char caracter;
  caracter=getchar();
    if(caracter=='s'){
      borrar_lista(cabeza);
     pthread_join(thread1,NULL);
     pthread_mutex_unlock(&mutex);
     pthread_mutex_destroy(&mutex);
      free(nodo_pokemon);
      exit(0);
    }else if(caracter=='N'){
      imprimir_menu();
    }
   
	break;
     case 2:
	cabeza = insertar_pokemon(cabeza);
	break;
     case 3:
       mostrar_resumen(cabeza);
        break;
     case 4:
       mostrar_pokemon_ID(cabeza);
	break;
     case 5 :
       modificar_pokemon(cabeza);
       break;
     case 6:
       cabeza=borrar_pokemon_ID(cabeza);
       break;
     case 7:
       exportar(cabeza);
       break;
     case 8:
       importar(cabeza);
       break;
     case 9:
       combate_pokemon(cabeza);
       break;
     case 10:
       mostrar_pokemon_corrupto(cabeza);
       break;
       
     case 11:
       
       if(guardar==0){
	 guardar=1;
	
	 thr_rc=pthread_create(&thread1, NULL, autosalvado, (void*)s_save);
       
       }else{
           printf("Error en la creación de un hilo: %d\n",thr_rc);
         }
	break;
   
  
 }
  }
    return 0; 
}

